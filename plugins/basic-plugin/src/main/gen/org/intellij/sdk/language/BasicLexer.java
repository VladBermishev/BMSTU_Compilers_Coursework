// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Basic.flex

package org.intellij.sdk.language;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.BasicTypes;
import com.intellij.psi.TokenType;


class BasicLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\u10df\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\12\22\2\0"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\37\1\45\1\46\1\47\1\50"+
    "\1\37\1\51\1\52\2\37\4\0\1\37\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\1\41\1\42\1\43\1\44\1\37\1\45"+
    "\1\46\1\47\1\50\1\37\1\51\1\52\2\37\1\53"+
    "\1\0\1\54\7\0\1\1\252\0\2\55\115\0\1\56"+
    "\u01a8\0\2\1\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\14\24\1\25\1\26"+
    "\2\1\1\0\1\27\2\0\1\30\1\0\1\31\1\32"+
    "\1\33\2\24\1\34\1\0\4\24\1\35\5\24\1\36"+
    "\2\24\1\35\4\0\1\37\1\24\2\40\1\24\1\0"+
    "\1\41\1\42\4\24\1\0\1\43\3\24\1\0\1\43"+
    "\3\0\1\30\1\24\2\44\1\24\1\45\1\46\1\24"+
    "\1\0\1\47\1\24\1\0\1\24\3\0\2\24\2\50"+
    "\2\51\2\52\2\0\2\24\2\0\1\53\1\54\1\24"+
    "\1\0\1\55\2\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\274\0\57\0\57"+
    "\0\57\0\353\0\57\0\57\0\57\0\57\0\57\0\57"+
    "\0\57\0\u011a\0\u0149\0\57\0\u0178\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\u03ac\0\57\0\57\0\u03db\0\u040a\0\215\0\57\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04c6\0\57\0\57\0\u04f5\0\u0524"+
    "\0\u01a7\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u01a7\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u01a7\0\u0729\0\u0758\0\57"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\57\0\u0843\0\u01a7\0\57"+
    "\0\u0872\0\u08a1\0\u01a7\0\u01a7\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u01a7\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\57\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0ad5\0\u0b04\0\u01a7\0\57\0\u0b33\0\u01a7"+
    "\0\u01a7\0\u0b62\0\u0b91\0\u01a7\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u01a7\0\57\0\u01a7\0\57"+
    "\0\u01a7\0\57\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23"+
    "\0\57\0\u01a7\0\u0e52\0\u0e81\0\57\0\u01a7\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\2"+
    "\1\21\1\22\1\23\1\24\1\25\3\26\1\27\1\30"+
    "\1\31\2\26\1\32\1\26\1\33\1\26\1\34\1\26"+
    "\1\35\1\26\1\36\1\37\1\40\1\41\1\26\1\42"+
    "\1\43\1\44\1\45\60\0\2\3\54\0\4\46\1\47"+
    "\52\46\36\0\1\50\5\0\1\51\10\0\1\50\1\0"+
    "\2\12\1\0\54\12\20\0\1\52\1\0\1\22\34\0"+
    "\24\53\1\54\1\55\31\53\24\0\1\56\54\0\1\26"+
    "\3\0\25\26\26\0\1\26\3\0\4\26\1\57\3\26"+
    "\1\60\4\26\1\61\7\26\2\0\1\62\23\0\1\26"+
    "\3\0\12\26\1\63\1\26\1\64\10\26\26\0\1\26"+
    "\3\0\15\26\1\65\4\26\1\66\2\26\26\0\1\26"+
    "\3\0\5\26\1\67\17\26\26\0\1\26\3\0\15\26"+
    "\1\70\7\26\26\0\1\26\3\0\4\26\1\71\20\26"+
    "\26\0\1\26\3\0\17\26\1\72\5\26\26\0\1\26"+
    "\3\0\22\26\1\73\2\26\26\0\1\26\3\0\7\26"+
    "\1\74\5\26\1\75\7\26\26\0\1\26\3\0\14\26"+
    "\1\76\10\26\26\0\1\26\3\0\7\26\1\77\15\26"+
    "\37\0\1\100\73\0\1\101\50\0\1\102\61\0\1\103"+
    "\33\0\1\52\7\0\1\104\24\0\25\53\1\105\31\53"+
    "\22\0\1\26\3\0\2\26\1\106\22\26\26\0\1\26"+
    "\3\0\13\26\1\107\11\26\45\0\1\110\37\0\1\26"+
    "\3\0\20\26\1\111\4\26\3\0\1\112\22\0\1\26"+
    "\3\0\3\26\1\113\21\26\26\0\1\26\3\0\17\26"+
    "\1\114\5\26\26\0\1\26\3\0\14\26\1\115\10\26"+
    "\26\0\1\26\3\0\15\26\1\116\7\26\26\0\1\26"+
    "\3\0\24\26\1\117\26\0\1\26\3\0\10\26\1\120"+
    "\14\26\2\0\1\121\23\0\1\26\3\0\1\26\1\122"+
    "\23\26\26\0\1\26\3\0\4\26\1\123\20\26\26\0"+
    "\1\26\3\0\21\26\1\124\3\26\26\0\1\26\3\0"+
    "\10\26\1\125\14\26\2\0\1\126\30\0\1\127\57\0"+
    "\1\130\54\0\1\131\45\0\1\132\1\0\1\132\2\0"+
    "\1\133\56\0\1\26\3\0\12\26\1\134\12\26\26\0"+
    "\1\26\3\0\4\26\1\135\20\26\36\0\1\136\46\0"+
    "\1\26\3\0\2\26\1\137\22\26\26\0\1\26\3\0"+
    "\16\26\1\140\6\26\26\0\1\26\3\0\21\26\1\141"+
    "\3\26\26\0\1\26\3\0\14\26\1\142\10\26\46\0"+
    "\1\143\36\0\1\26\3\0\14\26\1\144\10\26\26\0"+
    "\1\26\3\0\10\26\1\145\14\26\2\0\1\146\23\0"+
    "\1\26\3\0\12\26\1\147\12\26\44\0\1\150\56\0"+
    "\1\151\52\0\1\152\44\0\1\133\56\0\1\26\3\0"+
    "\1\153\24\26\26\0\1\26\3\0\21\26\1\154\3\26"+
    "\26\0\1\26\3\0\21\26\1\155\3\26\53\0\1\156"+
    "\31\0\1\26\3\0\12\26\1\157\12\26\44\0\1\160"+
    "\40\0\1\26\3\0\4\26\1\161\20\26\36\0\1\162"+
    "\74\0\1\163\47\0\1\164\37\0\1\26\3\0\17\26"+
    "\1\165\5\26\26\0\1\26\3\0\10\26\1\166\14\26"+
    "\2\0\1\167\32\0\1\170\53\0\1\171\52\0\1\26"+
    "\3\0\4\26\1\172\20\26\26\0\1\26\3\0\15\26"+
    "\1\173\7\26\47\0\1\174\45\0\1\175\46\0\1\26"+
    "\3\0\14\26\1\176\10\26\46\0\1\177\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3760];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\3\11\1\1\7\11"+
    "\2\1\1\11\15\1\2\11\2\1\1\0\1\11\2\0"+
    "\1\1\1\0\1\1\2\11\3\1\1\0\15\1\1\11"+
    "\4\0\1\11\2\1\1\11\1\1\1\0\6\1\1\0"+
    "\4\1\1\0\1\11\3\0\3\1\1\11\4\1\1\0"+
    "\2\1\1\0\1\1\3\0\3\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\0\2\1\2\0\1\11\2\1\1\0"+
    "\1\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  BasicLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 47: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 48: break;
          case 3:
            { yybegin(YYINITIAL); return BasicTypes.FLOAT_TYPE;
            }
          // fall through
          case 49: break;
          case 4:
            { yybegin(YYINITIAL); return BasicTypes.DOUBLE_TYPE;
            }
          // fall through
          case 50: break;
          case 5:
            { yybegin(YYINITIAL); return BasicTypes.STRING_TYPE;
            }
          // fall through
          case 51: break;
          case 6:
            { yybegin(YYINITIAL); return BasicTypes.INT_TYPE;
            }
          // fall through
          case 52: break;
          case 7:
            { yybegin(YYINITIAL); return BasicTypes.LONG_TYPE;
            }
          // fall through
          case 53: break;
          case 8:
            { yybegin(YYINITIAL); return BasicTypes.COMMENT;
            }
          // fall through
          case 54: break;
          case 9:
            { yybegin(YYINITIAL); return BasicTypes.LBRACKET;
            }
          // fall through
          case 55: break;
          case 10:
            { yybegin(YYINITIAL); return BasicTypes.RBRACKET;
            }
          // fall through
          case 56: break;
          case 11:
            { yybegin(YYINITIAL); return BasicTypes.MULT;
            }
          // fall through
          case 57: break;
          case 12:
            { yybegin(YYINITIAL); return BasicTypes.PLUS;
            }
          // fall through
          case 58: break;
          case 13:
            { yybegin(YYINITIAL); return BasicTypes.COMMA;
            }
          // fall through
          case 59: break;
          case 14:
            { yybegin(YYINITIAL); return BasicTypes.MINUS;
            }
          // fall through
          case 60: break;
          case 15:
            { yybegin(YYINITIAL); return BasicTypes.DIV;
            }
          // fall through
          case 61: break;
          case 16:
            { yybegin(YYINITIAL); return BasicTypes.INT_CONST;
            }
          // fall through
          case 62: break;
          case 17:
            { yybegin(YYINITIAL); return BasicTypes.LT;
            }
          // fall through
          case 63: break;
          case 18:
            { yybegin(YYINITIAL); return BasicTypes.EQ;
            }
          // fall through
          case 64: break;
          case 19:
            { yybegin(YYINITIAL); return BasicTypes.GT;
            }
          // fall through
          case 65: break;
          case 20:
            { yybegin(YYINITIAL); return BasicTypes.IDENTIFIER;
            }
          // fall through
          case 66: break;
          case 21:
            { yybegin(YYINITIAL); return BasicTypes.LCBRACKET;
            }
          // fall through
          case 67: break;
          case 22:
            { yybegin(YYINITIAL); return BasicTypes.RCBRACKET;
            }
          // fall through
          case 68: break;
          case 23:
            { yybegin(YYINITIAL); return BasicTypes.STRING_CONST;
            }
          // fall through
          case 69: break;
          case 24:
            { yybegin(YYINITIAL); return BasicTypes.REAL_CONST;
            }
          // fall through
          case 70: break;
          case 25:
            { yybegin(YYINITIAL); return BasicTypes.LE;
            }
          // fall through
          case 71: break;
          case 26:
            { yybegin(YYINITIAL); return BasicTypes.NE;
            }
          // fall through
          case 72: break;
          case 27:
            { yybegin(YYINITIAL); return BasicTypes.GE;
            }
          // fall through
          case 73: break;
          case 28:
            { yybegin(YYINITIAL); return BasicTypes.DO;
            }
          // fall through
          case 74: break;
          case 29:
            { yybegin(YYINITIAL); return BasicTypes.IF;
            }
          // fall through
          case 75: break;
          case 30:
            { yybegin(YYINITIAL); return BasicTypes.TO;
            }
          // fall through
          case 76: break;
          case 31:
            { yybegin(YYINITIAL); return BasicTypes.INCLUDE_PATH;
            }
          // fall through
          case 77: break;
          case 32:
            { yybegin(YYINITIAL); return BasicTypes.DIM;
            }
          // fall through
          case 78: break;
          case 33:
            { yybegin(YYINITIAL); return BasicTypes.END;
            }
          // fall through
          case 79: break;
          case 34:
            { yybegin(YYINITIAL); return BasicTypes.FOR;
            }
          // fall through
          case 80: break;
          case 35:
            { yybegin(YYINITIAL); return BasicTypes.SUB;
            }
          // fall through
          case 81: break;
          case 36:
            { yybegin(YYINITIAL); return BasicTypes.ELSE;
            }
          // fall through
          case 82: break;
          case 37:
            { yybegin(YYINITIAL); return BasicTypes.LOOP;
            }
          // fall through
          case 83: break;
          case 38:
            { yybegin(YYINITIAL); return BasicTypes.NEXT;
            }
          // fall through
          case 84: break;
          case 39:
            { yybegin(YYINITIAL); return BasicTypes.THEN;
            }
          // fall through
          case 85: break;
          case 40:
            { yybegin(YYINITIAL); return BasicTypes.PRINT;
            }
          // fall through
          case 86: break;
          case 41:
            { yybegin(YYINITIAL); return BasicTypes.UNTIL;
            }
          // fall through
          case 87: break;
          case 42:
            { yybegin(YYINITIAL); return BasicTypes.WHILE;
            }
          // fall through
          case 88: break;
          case 43:
            { yybegin(YYINITIAL); return BasicTypes.PRAGMA;
            }
          // fall through
          case 89: break;
          case 44:
            { yybegin(YYINITIAL); return BasicTypes.DECLARE;
            }
          // fall through
          case 90: break;
          case 45:
            { yybegin(YYINITIAL); return BasicTypes.INCLUDE;
            }
          // fall through
          case 91: break;
          case 46:
            { yybegin(YYINITIAL); return BasicTypes.FUNCTION;
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
